{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\webdev\\\\rubberducker\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, forwardRef, memo, useCallback } from 'react';\nimport keyboardJS from 'keyboardjs';\nimport './App.css';\nimport { TextLine } from './TextLine';\nimport { ArcherContainer, ArcherElement } from \"react-archer\";\nimport 'reactflow/dist/style.css';\nimport DragSelect from 'dragselect';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet AppStyle = {\n  backgroundColor: '#091833',\n  width: '100vw',\n  height: '100vh'\n};\nconst App = () => {\n  _s();\n  // load history from database\n  const initialTextLineId = 1;\n  const [textLines, setTextLines] = useState([{\n    _id: initialTextLineId,\n    indent: 0,\n    text: \"\",\n    parent: null,\n    children: []\n  }]); //list of TextLineData objects\n\n  useEffect(() => {\n    const getPreviousTextLines = async () => {\n      await fetch(\"http://localhost:5050/page\").then(dbTextLines => dbTextLines.json()).then(dbTextLines => {\n        // if there are lines to be loaded\n        if (dbTextLines.length > 0) {\n          dbTextLines = dfs(dbTextLines);\n          // set selected to the last one\n          selectedInputId.current = dbTextLines[dbTextLines.length - 1]._id;\n          setTextLines(dbTextLines);\n        }\n      }).catch(e => console.log(e));\n    };\n    getPreviousTextLines();\n  }, []);\n  const dfs = textLines => {\n    const root = textLines.find(tl => tl.parent === null);\n    let stack = [];\n    let res = [];\n    stack.push(root);\n    while (stack.length > 0) {\n      const current = stack.shift();\n      res.push(current);\n      const children = current.children.map(child => textLines.find(tl => tl._id === child));\n      stack = children.concat(stack);\n    }\n    return res;\n  };\n\n  // ----- Add TextLine ----- //\n  /*\n  Detect keypress\n  add new textLine following currently selected textLine in state textLines\n  set newlyAddedId\n  rerender\n  storeNewRef\n  focus on new TextLine\n  (upon unfocusing)\n  post request to db, create\n  update id\n  */\n  const addTextLine = isChild => {\n    const selected = textLines.find(tl => tl._id === selectedInputId.current);\n    // add only if current selected is not empty\n    if (selected.text.length > 0) {\n      const newId = textLines.length + 1;\n      if (isChild) {\n        // add below lastChild's lastChild\n        // if self has no children, add below self\n        let addingIndex = textLines.findIndex(tl => tl._id === selected._id);\n        // if self has children, add below lastChild\n        if (selected.children.length > 0) {\n          const lastChild = textLines.find(tl => tl._id === selected.children[selected.children.length - 1]);\n          addingIndex = textLines.findIndex(tl => tl._id === lastChild._id);\n          // if lastChild has children add below its last child\n          if (lastChild.children.length > 0) {\n            const lastChildslastChild = textLines.find(tl => tl._id === lastChild.children[lastChild.children.length - 1]);\n            addingIndex = textLines.findIndex(tl => tl._id === lastChildslastChild._id);\n          }\n        }\n        const parent = selected;\n        const newTextLines = [...textLines.slice(0, addingIndex + 1), {\n          _id: newId,\n          indent: parent.indent + 1,\n          text: \"\",\n          parent: parent._id,\n          children: []\n        }, ...textLines.slice(addingIndex + 1)];\n        newTextLines.find(tl => tl._id === parent._id).children.push(newId);\n        setTextLines(newTextLines);\n      } else {\n        // is sibling\n        if (selected.parent === null) return;\n        // add below lastSibling's lastchild\n        const parent = textLines.find(tl => tl._id === selected.parent);\n        const lastSibling = textLines.find(tl => tl._id === parent.children[parent.children.length - 1]);\n        // if last sibling has no children add below last sibling\n        let addingIndex = textLines.findIndex(tl => tl._id === lastSibling._id);\n        // if last sibling has children add it below the last child\n        if (lastSibling.children.length > 0) {\n          const lastChild = textLines.find(tl => tl._id === lastSibling.children[lastSibling.children.length - 1]);\n          addingIndex = textLines.findIndex(tl => tl._id === lastChild._id);\n        }\n        const newTextLines = [...textLines.slice(0, addingIndex + 1), {\n          _id: newId,\n          indent: parent.indent + 1,\n          text: \"\",\n          parent: parent._id,\n          children: []\n        }, ...textLines.slice(addingIndex + 1)];\n        newTextLines.find(tl => tl._id === parent._id).children.push(newId);\n        setTextLines(newTextLines);\n      }\n    }\n  };\n  // scroll to new TextLine\n  const endingRef = useRef(null);\n  useEffect(() => {\n    if (endingRef.current) {\n      endingRef.current.scrollIntoView();\n    }\n  });\n\n  // ----- Detect Keypress ----- //\n  useEffect(() => {\n    const enterHandler = e => {\n      addTextLine(true);\n    };\n    const shiftEnterHandler = e => {\n      addTextLine(false);\n    };\n    const arrowKeyHandler = e => {\n      e.preventDefault();\n      console.log(\"pressed\", e.key);\n      changeHighlights(e.key);\n    };\n    const deleteHandler = e => {\n      deleteTextLines(highlighted);\n    };\n    const tabHandler = e => {\n      e.preventDefault();\n      console.log(\"tab pressed\");\n    };\n    keyboardJS.bind('enter', enterHandler);\n    keyboardJS.bind('shift + enter', shiftEnterHandler);\n    keyboardJS.bind(['right', 'left', 'up', 'down'], arrowKeyHandler);\n    keyboardJS.bind('delete', deleteHandler);\n    keyboardJS.bind('tab', tabHandler);\n    return () => {\n      keyboardJS.unbind('enter', enterHandler);\n      keyboardJS.unbind('shift + enter', shiftEnterHandler);\n      keyboardJS.unbind(['right', 'left', 'up', 'down'], arrowKeyHandler);\n      keyboardJS.unbind('delete', deleteHandler);\n      keyboardJS.unbind('tab', tabHandler);\n    };\n  });\n\n  // ----- DB methods ------ //\n  // create document in db\n  // receives new Id as response\n  const createInDB = async oldId => {\n    // triggered when unfocusing on textLine\n    const textLine = textLines.find(tl => tl._id === oldId);\n    await fetch(\"http://localhost:5050/page\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        text: textLine.text,\n        indent: textLine.indent,\n        parent: textLine.parent\n      })\n    }).then(response => response.json()).then(dbResponse => updateId(oldId, dbResponse.id)).catch(e => console.log(e));\n  };\n\n  // update ID in refs and textLines\n  const updateId = (oldId, newId) => {\n    textLineRefs.current[newId] = textLineRefs.current[oldId];\n    delete textLineRefs[oldId];\n    setTextLines(textLines.map(textLine => {\n      const newTextLine = {\n        ...textLine\n      };\n      if (newTextLine._id === oldId) newTextLine._id = newId;\n      if (newTextLine.parent === oldId) newTextLine.parent = newId;\n      newTextLine.children = newTextLine.children.map(id => id === oldId ? newId : id);\n      return newTextLine;\n    }));\n  };\n  const editInDB = async (id, newText) => {\n    await fetch(\"http://localhost:5050/page\", {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        id: id,\n        text: newText\n      })\n    }).catch(e => console.log(e));\n  };\n  const deleteInDB = async ids => {\n    await fetch(\"http://localhost:5050/page\", {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        ids: ids\n      })\n    }).then(dbTextLines => dbTextLines.json()).then(dbTextLines => {\n      // if there are lines to be loaded\n      if (dbTextLines.length > 0) {\n        dbTextLines = dfs(dbTextLines);\n        // set selected to the last one\n        selectedInputId.current = dbTextLines[dbTextLines.length - 1]._id;\n        setTextLines(dbTextLines);\n      }\n    }).catch(e => console.log(e));\n  };\n\n  // ----- TextLine Selecting & Focus ----- //\n  const textLineRefs = useRef({}); //{_id: ref}\n  const selectedInputId = useRef(initialTextLineId);\n  const [highlighted, sethighlighted] = useState([]);\n  const storeNewRef = (_id, ref) => {\n    if (ref !== null && !(_id in textLineRefs.current)) {\n      textLineRefs.current[_id] = ref;\n      ref.focus();\n      selectedInputId.current = _id;\n      sethighlighted(getAllChildren(_id));\n    }\n  };\n  const handleClick = id => {\n    console.log(textLines.find(tl => tl._id === id));\n    selectedInputId.current = id;\n    sethighlighted(getAllChildren(id));\n  };\n  const deleteTextLines = ids => {\n    // prevent deleting root\n    ids.filter(id => id !== textLines[0]._id);\n    console.log(\"deleteTextLines\", ids);\n    const newTextLines = textLines.filter(textLine => !ids.includes(textLine._id))\n    //remove in children\n    .map(textLine => {\n      return {\n        ...textLine,\n        children: textLine.children.filter(c => !ids.includes(c))\n      };\n    });\n    newTextLines.forEach(tl => tl.children.filter(c => !ids.includes(c)));\n    ids.forEach(id => delete textLineRefs.current[id]);\n\n    // Focusing on a replacement\n    let replacementIndex = textLines.findIndex(tl => tl._id === selectedInputId.current);\n    if (replacementIndex === newTextLines.length) replacementIndex -= 1;\n    const newSelected = newTextLines[replacementIndex];\n    selectedInputId.current = newSelected._id;\n    textLineRefs.current[newSelected._id].focus();\n    const DBids = ids.filter(id => id.length === 24);\n    deleteInDB(DBids);\n    sethighlighted(getAllChildren(newSelected._id));\n    setTextLines(newTextLines);\n  };\n  const changeHighlights = key => {\n    const selected = textLines.find(tl => selectedInputId.current === tl._id);\n    const parent = textLines.find(tl => tl._id === selected.parent);\n    switch (key) {\n      case 'ArrowUp':\n        // previous sibling, or parent\n\n        if (selected.parent !== null) {\n          // if not at root\n          // if currently selected is first child\n          if (selected._id === parent.children[0]) {\n            // go to parent\n            selectedInputId.current = parent._id;\n            console.log(\"up, go to parent\", parent._id);\n            textLineRefs.current[parent._id].focus();\n            sethighlighted(getAllChildren(parent._id));\n          } else {\n            // if currently selected is not first child\n            // go to previous sibling\n            const indexAsChild = parent.children.findIndex(c => c === selected._id);\n            const previousSiblingId = parent.children[indexAsChild - 1];\n            selectedInputId.current = previousSiblingId;\n            console.log(\"up, go to previous sibling\", previousSiblingId);\n            textLineRefs.current[previousSiblingId].focus();\n            sethighlighted(getAllChildren(previousSiblingId));\n          }\n        }\n        break;\n      case 'ArrowDown':\n        // next sibling, or sibling of parent\n\n        // if at root, target second textLine\n        if (selected._id === textLines[0]._id) {\n          selectedInputId.current = textLines[1]._id;\n          textLineRefs.current[textLines[1]._id].focus();\n          sethighlighted(getAllChildren(textLines[1]._id));\n          break;\n        }\n        //if parent is root, target sibling of root\n        if (parent._id === textLines[0]._id) {\n          const root = textLines[0];\n          const indexAsChild = root.children.findIndex(c => c === selected._id);\n          // if not the last child\n          if (indexAsChild !== root.children.length - 1) {\n            const siblingId = root.children[indexAsChild + 1];\n            selectedInputId.current = siblingId;\n            textLineRefs.current[siblingId].focus();\n            sethighlighted(getAllChildren(siblingId));\n            break;\n          } else {\n            // if the last child\n            if (selected.children.length > 0) {\n              // if has children, go to first child\n              const firstChildId = selected.children[0];\n              selectedInputId.current = firstChildId;\n              textLineRefs.current[firstChildId].focus();\n              sethighlighted(getAllChildren(firstChildId));\n              break;\n            }\n          }\n          break;\n        }\n        // if currently selected is last child\n        if (selected._id !== textLines[textLines.length - 1]._id) {\n          // if not at last textLine\n\n          if (selected._id === parent.children[parent.children.length - 1]) {\n            // go to sibling of parent\n            const grandparent = textLines.find(tl => tl._id === parent.parent);\n            const parentIndex = grandparent.children.findIndex(p => p === parent._id);\n            const siblingOfParentId = grandparent.children[parentIndex + 1];\n            selectedInputId.current = siblingOfParentId;\n            textLineRefs.current[siblingOfParentId].focus();\n            sethighlighted(getAllChildren(siblingOfParentId));\n          } else {\n            // go to next sibling\n            const indexAsChild = parent.children.findIndex(c => c === selected._id);\n            const nextSiblingId = parent.children[indexAsChild + 1];\n            selectedInputId.current = nextSiblingId;\n            textLineRefs.current[nextSiblingId].focus();\n            sethighlighted(getAllChildren(nextSiblingId));\n          }\n        }\n        break;\n      case 'ArrowLeft':\n        //  go to parent\n        if (selected.parent !== null) {\n          selectedInputId.current = parent._id;\n          textLineRefs.current[parent._id].focus();\n          sethighlighted(getAllChildren(parent._id));\n        }\n        break;\n      case 'ArrowRight':\n        // go to child\n        if (selected.children.length > 0) {\n          const childId = selected.children[0];\n          selectedInputId.current = childId;\n          textLineRefs.current[childId].focus();\n          sethighlighted(getAllChildren(childId));\n        }\n        break;\n      default:\n        break;\n    }\n  };\n  const getAllChildren = id => {\n    // not in order\n    let stack = [];\n    let res = [];\n    const first = textLines.find(tl => tl._id === id);\n    if (first.children.length === 0) return [first._id];\n    stack.push(first);\n    while (stack.length > 0) {\n      const current = stack.pop();\n      stack = stack.concat(current.children.map(c => textLines.find(tl => tl._id === c)));\n      res.push(current._id);\n    }\n    return res; // returns all ids (not objects)\n  };\n\n  // // ----- Drag Select ----- //\n  // const [selectedItems, setSelectedItems] = useState([]);\n  // const ds = new DragSelect({\n  //   selectables: document.getElementsByClassName(\"box\"),\n  //   draggability: false\n  // });\n\n  // useEffect(() => {\n  //   ds.subscribe(\"callback\", (e) => {\n  //     //e.items.forEach(item => console.log(\"dragSelect: \", item.getAttribute('data-info')))\n  //     setSelectedItems(e.items)\n  //   });\n\n  //   return () => {\n  //     ds.unsubscribe();\n  //   };\n  // }, []);\n\n  // ----- render ----- //\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    style: AppStyle,\n    children: [/*#__PURE__*/_jsxDEV(ArcherContainer, {\n      endMarker: false,\n      lineStyle: \"straight\",\n      children: [/*#__PURE__*/_jsxDEV(ArcherElement, {\n        id: \"dummy\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"dummy\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 9\n      }, this), textLines.map(textLine => /*#__PURE__*/_jsxDEV(TextLine, {\n        indent: textLine.indent,\n        data: textLine,\n        handleClick: handleClick,\n        createInDB: createInDB,\n        editInDB: editInDB,\n        storeNewRef: storeNewRef,\n        deleteTextLine: deleteTextLines,\n        isHighlighted: highlighted.includes(textLine._id)\n      }, textLine._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: endingRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 450,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 425,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"KXgaTTfpTwEDxDCnQfHyqCRard8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","forwardRef","memo","useCallback","keyboardJS","TextLine","ArcherContainer","ArcherElement","DragSelect","jsxDEV","_jsxDEV","AppStyle","backgroundColor","width","height","App","_s","initialTextLineId","textLines","setTextLines","_id","indent","text","parent","children","getPreviousTextLines","fetch","then","dbTextLines","json","length","dfs","selectedInputId","current","catch","e","console","log","root","find","tl","stack","res","push","shift","map","child","concat","addTextLine","isChild","selected","newId","addingIndex","findIndex","lastChild","lastChildslastChild","newTextLines","slice","lastSibling","endingRef","scrollIntoView","enterHandler","shiftEnterHandler","arrowKeyHandler","preventDefault","key","changeHighlights","deleteHandler","deleteTextLines","highlighted","tabHandler","bind","unbind","createInDB","oldId","textLine","method","headers","body","JSON","stringify","response","dbResponse","updateId","id","textLineRefs","newTextLine","editInDB","newText","deleteInDB","ids","sethighlighted","storeNewRef","ref","focus","getAllChildren","handleClick","filter","includes","c","forEach","replacementIndex","newSelected","DBids","indexAsChild","previousSiblingId","siblingId","firstChildId","grandparent","parentIndex","p","siblingOfParentId","nextSiblingId","childId","first","pop","className","style","endMarker","lineStyle","fileName","_jsxFileName","lineNumber","columnNumber","data","deleteTextLine","isHighlighted","_c","$RefreshReg$"],"sources":["C:/Users/Admin/webdev/rubberducker/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef, forwardRef, memo, useCallback } from 'react';\nimport keyboardJS from 'keyboardjs';\nimport './App.css';\nimport { TextLine } from './TextLine'\nimport { ArcherContainer, ArcherElement } from \"react-archer\";\nimport 'reactflow/dist/style.css';\n\n\nimport DragSelect from 'dragselect'\n\nlet AppStyle = {\n  backgroundColor: '#091833',\n  width: '100vw',\n  height: '100vh',\n}\n\nconst App = () => {\n\n\n  // load history from database\n  const initialTextLineId = 1\n  const [textLines, setTextLines] = useState([{ _id: initialTextLineId, indent: 0, text: \"\", parent: null, children: [] }]) //list of TextLineData objects\n\n  useEffect(() => {\n    const getPreviousTextLines = async () => {\n      await fetch(\"http://localhost:5050/page\")\n        .then(dbTextLines => dbTextLines.json())\n        .then(dbTextLines => {\n          // if there are lines to be loaded\n          if (dbTextLines.length > 0) {\n            dbTextLines = dfs(dbTextLines)\n            // set selected to the last one\n            selectedInputId.current = dbTextLines[dbTextLines.length - 1]._id\n            setTextLines(dbTextLines)\n          }\n        })\n        .catch(e => console.log(e))\n    }\n    getPreviousTextLines()\n  }, [])\n\n\n  const dfs = (textLines) => {\n    const root = textLines.find(tl => tl.parent === null)\n    let stack = []\n    let res = []\n    stack.push(root)\n    while (stack.length > 0) {\n      const current = stack.shift()\n      res.push(current)\n      const children = current.children.map(child => textLines.find(tl => tl._id === child))\n      stack = children.concat(stack)\n    }\n    return res\n  }\n\n\n  // ----- Add TextLine ----- //\n  /*\n  Detect keypress\n  add new textLine following currently selected textLine in state textLines\n  set newlyAddedId\n  rerender\n  storeNewRef\n  focus on new TextLine\n  (upon unfocusing)\n  post request to db, create\n  update id\n  */\n  const addTextLine = (isChild) => {\n    const selected = textLines.find(tl => tl._id === selectedInputId.current)\n    // add only if current selected is not empty\n    if (selected.text.length > 0) {\n      const newId = textLines.length + 1\n      if (isChild) {\n        // add below lastChild's lastChild\n        // if self has no children, add below self\n        let addingIndex = textLines.findIndex(tl => tl._id === selected._id)\n        // if self has children, add below lastChild\n        if (selected.children.length > 0) {\n          const lastChild = textLines.find(tl => tl._id === selected.children[selected.children.length - 1])\n          addingIndex = textLines.findIndex(tl => tl._id === lastChild._id)\n          // if lastChild has children add below its last child\n          if (lastChild.children.length > 0) {\n            const lastChildslastChild = textLines.find(tl => tl._id === lastChild.children[lastChild.children.length - 1])\n            addingIndex = textLines.findIndex(tl => tl._id === lastChildslastChild._id)\n          }\n        }\n        const parent = selected\n        const newTextLines = [...textLines.slice(0, addingIndex + 1),\n        { _id: newId, indent: parent.indent + 1, text: \"\", parent: parent._id, children: [] },\n        ...textLines.slice(addingIndex + 1)]\n        newTextLines.find(tl => tl._id === parent._id).children.push(newId)\n        setTextLines(newTextLines)\n      } else { // is sibling\n        if (selected.parent === null) return\n        // add below lastSibling's lastchild\n        const parent = textLines.find(tl => tl._id === selected.parent)\n        const lastSibling = textLines.find(tl => tl._id === parent.children[parent.children.length - 1])\n        // if last sibling has no children add below last sibling\n        let addingIndex = textLines.findIndex(tl => tl._id === lastSibling._id)\n        // if last sibling has children add it below the last child\n        if (lastSibling.children.length > 0) {\n          const lastChild = textLines.find(tl => tl._id === lastSibling.children[lastSibling.children.length - 1])\n          addingIndex = textLines.findIndex(tl => tl._id === lastChild._id)\n        }\n        const newTextLines = [...textLines.slice(0, addingIndex + 1),\n        { _id: newId, indent: parent.indent + 1, text: \"\", parent: parent._id, children: [] },\n        ...textLines.slice(addingIndex + 1)]\n        newTextLines.find(tl => tl._id === parent._id).children.push(newId)\n        setTextLines(newTextLines)\n      }\n    }\n  }\n  // scroll to new TextLine\n  const endingRef = useRef(null)\n  useEffect(() => {\n    if (endingRef.current) { endingRef.current.scrollIntoView() }\n  })\n\n\n  // ----- Detect Keypress ----- //\n  useEffect(() => {\n    const enterHandler = e => {\n      addTextLine(true)\n    }\n\n    const shiftEnterHandler = e => {\n      addTextLine(false)\n    }\n\n    const arrowKeyHandler = e => {\n      e.preventDefault()\n      console.log(\"pressed\", e.key)\n      changeHighlights(e.key)\n    }\n\n    const deleteHandler = e => {\n      deleteTextLines(highlighted)\n    }\n\n    const tabHandler = e => {\n      e.preventDefault()\n      console.log(\"tab pressed\")\n    }\n\n\n\n    keyboardJS.bind('enter', enterHandler)\n    keyboardJS.bind('shift + enter', shiftEnterHandler)\n    keyboardJS.bind(['right', 'left', 'up', 'down'], arrowKeyHandler)\n    keyboardJS.bind('delete', deleteHandler)\n    keyboardJS.bind('tab', tabHandler)\n\n    return () => {\n      keyboardJS.unbind('enter', enterHandler)\n      keyboardJS.unbind('shift + enter', shiftEnterHandler)\n      keyboardJS.unbind(['right', 'left', 'up', 'down'], arrowKeyHandler)\n      keyboardJS.unbind('delete', deleteHandler)\n      keyboardJS.unbind('tab', tabHandler)\n\n\n\n    }\n  })\n\n  // ----- DB methods ------ //\n  // create document in db\n  // receives new Id as response\n  const createInDB = async (oldId) => {\n    // triggered when unfocusing on textLine\n    const textLine = textLines.find(tl => tl._id === oldId)\n    await fetch(\"http://localhost:5050/page\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        text: textLine.text,\n        indent: textLine.indent,\n        parent: textLine.parent,\n      })\n    })\n      .then(response => response.json())\n      .then(dbResponse => updateId(oldId, dbResponse.id))\n      .catch(e => console.log(e))\n  }\n\n  // update ID in refs and textLines\n  const updateId = (oldId, newId) => {\n    textLineRefs.current[newId] = textLineRefs.current[oldId]\n    delete textLineRefs[oldId]\n    setTextLines(textLines.map(textLine => {\n      const newTextLine = { ...textLine }\n      if (newTextLine._id === oldId) newTextLine._id = newId\n      if (newTextLine.parent === oldId) newTextLine.parent = newId\n      newTextLine.children = newTextLine.children.map(id => id === oldId ? newId : id)\n      return newTextLine\n    }))\n  }\n\n  const editInDB = async (id, newText) => {\n    await fetch(\"http://localhost:5050/page\", {\n      method: \"PATCH\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        id: id,\n        text: newText,\n      }),\n    })\n      .catch(e => console.log(e))\n  }\n\n  const deleteInDB = async (ids) => {\n    await fetch(\"http://localhost:5050/page\", {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        ids: ids\n      }),\n    }).then(dbTextLines => dbTextLines.json())\n      .then(dbTextLines => {\n        // if there are lines to be loaded\n        if (dbTextLines.length > 0) {\n          dbTextLines = dfs(dbTextLines)\n          // set selected to the last one\n          selectedInputId.current = dbTextLines[dbTextLines.length - 1]._id\n          setTextLines(dbTextLines)\n        }\n      })\n      .catch(e => console.log(e))\n  }\n\n\n\n  // ----- TextLine Selecting & Focus ----- //\n  const textLineRefs = useRef({}) //{_id: ref}\n  const selectedInputId = useRef(initialTextLineId)\n  const [highlighted, sethighlighted] = useState([])\n\n  const storeNewRef = (_id, ref) => {\n    if (ref !== null && !(_id in textLineRefs.current)) {\n      textLineRefs.current[_id] = ref\n      ref.focus()\n      selectedInputId.current = _id\n      sethighlighted(getAllChildren(_id))\n    }\n  }\n\n  const handleClick = (id) => {\n    console.log(textLines.find(tl => tl._id === id))\n    selectedInputId.current = id\n    sethighlighted(getAllChildren(id))\n  }\n\n  const deleteTextLines = (ids) => {\n\n    // prevent deleting root\n    ids.filter(id => id !== textLines[0]._id)\n    console.log(\"deleteTextLines\", ids)\n    const newTextLines = textLines\n      .filter(textLine => !ids.includes(textLine._id))\n      //remove in children\n      .map(textLine => { return { ...textLine, children: textLine.children.filter(c => !ids.includes(c)) } })\n    newTextLines.forEach(tl => tl.children.filter(c => !ids.includes(c)))\n    ids.forEach(id => delete textLineRefs.current[id])\n\n    // Focusing on a replacement\n    let replacementIndex = textLines.findIndex(tl => tl._id === selectedInputId.current)\n    if (replacementIndex === newTextLines.length) replacementIndex -= 1\n    const newSelected = newTextLines[replacementIndex]\n    selectedInputId.current = newSelected._id\n    textLineRefs.current[newSelected._id].focus()\n    const DBids = ids.filter(id => id.length === 24)\n    deleteInDB(DBids)\n    sethighlighted(getAllChildren(newSelected._id))\n    setTextLines(newTextLines)\n  }\n\n  const changeHighlights = (key) => {\n    const selected = textLines.find(tl => selectedInputId.current === tl._id)\n    const parent = textLines.find(tl => tl._id === selected.parent)\n    switch (key) {\n      case 'ArrowUp':\n        // previous sibling, or parent\n\n        if (selected.parent !== null) { // if not at root\n          // if currently selected is first child\n          if (selected._id === parent.children[0]) {\n            // go to parent\n            selectedInputId.current = parent._id\n            console.log(\"up, go to parent\", parent._id)\n            textLineRefs.current[parent._id].focus()\n            sethighlighted(getAllChildren(parent._id))\n          } else { // if currently selected is not first child\n            // go to previous sibling\n            const indexAsChild = parent.children.findIndex(c => c === selected._id)\n            const previousSiblingId = parent.children[indexAsChild - 1]\n            selectedInputId.current = previousSiblingId\n            console.log(\"up, go to previous sibling\", previousSiblingId)\n\n            textLineRefs.current[previousSiblingId].focus()\n            sethighlighted(getAllChildren(previousSiblingId))\n          }\n        }\n\n        break\n      case 'ArrowDown':\n        // next sibling, or sibling of parent\n\n        // if at root, target second textLine\n        if (selected._id === textLines[0]._id) {\n          selectedInputId.current = textLines[1]._id\n          textLineRefs.current[textLines[1]._id].focus()\n          sethighlighted(getAllChildren(textLines[1]._id))\n          break\n        }\n        //if parent is root, target sibling of root\n        if (parent._id === textLines[0]._id) {\n          const root = textLines[0]\n          const indexAsChild = root.children.findIndex(c => c === selected._id)\n          // if not the last child\n          if (indexAsChild !== root.children.length - 1) {\n            const siblingId = root.children[indexAsChild + 1]\n            selectedInputId.current = siblingId\n            textLineRefs.current[siblingId].focus()\n            sethighlighted(getAllChildren(siblingId))\n            break\n          } else { // if the last child\n            if (selected.children.length > 0) { // if has children, go to first child\n              const firstChildId = selected.children[0]\n              selectedInputId.current = firstChildId\n              textLineRefs.current[firstChildId].focus()\n              sethighlighted(getAllChildren(firstChildId))\n              break\n            }\n          }\n          break\n        }\n        // if currently selected is last child\n        if (selected._id !== textLines[textLines.length - 1]._id) { // if not at last textLine\n\n          if (selected._id === parent.children[parent.children.length - 1]) {\n            // go to sibling of parent\n            const grandparent = textLines.find(tl => tl._id === parent.parent)\n            const parentIndex = grandparent.children.findIndex(p => p === parent._id)\n            const siblingOfParentId = grandparent.children[parentIndex + 1]\n            selectedInputId.current = siblingOfParentId\n            textLineRefs.current[siblingOfParentId].focus()\n            sethighlighted(getAllChildren(siblingOfParentId))\n          } else {\n            // go to next sibling\n            const indexAsChild = parent.children.findIndex(c => c === selected._id)\n            const nextSiblingId = parent.children[indexAsChild + 1]\n            selectedInputId.current = nextSiblingId\n            textLineRefs.current[nextSiblingId].focus()\n            sethighlighted(getAllChildren(nextSiblingId))\n          }\n        }\n        break\n      case 'ArrowLeft':\n        //  go to parent\n        if (selected.parent !== null) {\n\n          selectedInputId.current = parent._id\n          textLineRefs.current[parent._id].focus()\n          sethighlighted(getAllChildren(parent._id))\n        }\n        break\n      case 'ArrowRight':\n        // go to child\n        if (selected.children.length > 0) {\n          const childId = selected.children[0]\n          selectedInputId.current = childId\n          textLineRefs.current[childId].focus()\n          sethighlighted(getAllChildren(childId))\n        }\n        break\n      default:\n        break\n    }\n  }\n\n  const getAllChildren = (id) => {\n    // not in order\n    let stack = []\n    let res = []\n    const first = textLines.find(tl => tl._id === id)\n    if (first.children.length === 0) return [first._id]\n    stack.push(first)\n    while (stack.length > 0) {\n      const current = stack.pop()\n      stack = stack.concat(current.children.map(c => textLines.find(tl => tl._id === c)))\n      res.push(current._id)\n    }\n    return res // returns all ids (not objects)\n  }\n\n\n  // // ----- Drag Select ----- //\n  // const [selectedItems, setSelectedItems] = useState([]);\n  // const ds = new DragSelect({\n  //   selectables: document.getElementsByClassName(\"box\"),\n  //   draggability: false\n  // });\n\n  // useEffect(() => {\n  //   ds.subscribe(\"callback\", (e) => {\n  //     //e.items.forEach(item => console.log(\"dragSelect: \", item.getAttribute('data-info')))\n  //     setSelectedItems(e.items)\n  //   });\n\n  //   return () => {\n  //     ds.unsubscribe();\n  //   };\n  // }, []);\n\n  // ----- render ----- //\n  return (\n\n    <div className=\"App\" style={AppStyle}>\n      <ArcherContainer\n        endMarker={false}\n        lineStyle='straight'\n      >\n        <ArcherElement id=\"dummy\"\n        >\n          <div>dummy</div>\n        </ArcherElement>\n\n        {textLines.map((textLine) =>\n\n          <TextLine\n            key={textLine._id}\n            indent={textLine.indent}\n            data={textLine}\n            handleClick={handleClick}\n            createInDB={createInDB}\n            editInDB={editInDB}\n            storeNewRef={storeNewRef}\n            deleteTextLine={deleteTextLines}\n            isHighlighted={highlighted.includes(textLine._id)}\n          />\n        )}\n      </ArcherContainer>\n      <div ref={endingRef}></div>\n    </div>\n  )\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}